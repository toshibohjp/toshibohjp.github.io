<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorials | Tortoise-like pace]]></title>
  <link href="http://toshibohjp.github.io/blog/categories/tutorials/atom.xml" rel="self"/>
  <link href="http://toshibohjp.github.io/"/>
  <updated>2013-05-05T23:26:11+09:00</updated>
  <id>http://toshibohjp.github.io/</id>
  <author>
    <name><![CDATA[toshibohjp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[RailsGuides] #04 Model、バリデーションとコンソール]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/05/rorguide04-model/"/>
    <updated>2013-05-05T14:11:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/05/rorguide04-model</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/02/rorguide03-getting-up-and-running-quickly-with-scaffolding/">前回</a> は Scaffold を利用して Post の雛形を作成しました。今回は Model の中身を見て、バリデーションの基本を学び、コンソールで Model の動作を確認する方法についてみていきたいと思います。</p>

<!-- more -->


<p>
   <ul>

   <ul>

   <ul>
   <li><a href="#6.4+Model">6.4 Model</a>   </li>
   <li><a href="#6.5+バリデーションを追加する">6.5 バリデーションを追加する</a>   </li>
   <li><a href="#6.6+コンソールを使用する">6.6 コンソールを使用する</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<h3 id="6.4+Model">6.4 Model</h3>

<p>Post の Model を見てみましょう。app/models/post.rb は実にシンプルな内容です。</p>

<p><code>ruby app/models/post.rb
class Post &lt; ActiveRecord::Base
  attr_accessible :content, :name, :title
end
</code></p>

<p>本文を読み進める前に、コードを見て気になった事があります。<code>ActiveRecord::Base</code> は置いておくとして、属性のアクセスを定義するクラスメソッドは <code>attr_accessor</code> ではなくて、<code>attr_accessible</code> となっていますね。<a href="http://yoshifumisato.jeez.jp/wordpress/post/rails/882">Railsのattr_accessible設定について - チュパカブラの勉強日記</a> によると <code>attr_accessible</code> は Rails 独自の設定で、属性をセキュアに更新する仕組みのようです。</p>

<p><code>ActiveRecord::Base</code> を継承していることに注目してください。ActiveRecord は非常に多くの機能を、ユーザーが実装する Rails Model クラスに無料で提供しています。例えば、基本的なデータベースの CRUD(Create, Read, Update, Destroy)操作、データ妥当性チェック、同様に洗練された検索のサポートおよびお互いに複数のモデルを関連付けを可能にすることを含みます。このファイルで他に重要な部分は、<code>attr_accessible</code> です。これは(例えば、<code>update_attributes</code> 経由で)一括で更新する事が許可されている属性のホワイトリストを指定します。つまり、これは <code>attr_accessible</code> で指定した属性のみ Rails 上でアクセスできるということ意味しています。</p>

<h3 id="6.5+バリデーションを追加する">6.5 バリデーションを追加する</h3>

<p>Rails はモデルに送信されるデータの妥当性チェックを補助するメソッドを含みます。app/models/post.rb を開いて、以下のように編集します。</p>

<p>```ruby app/models/post.rb
class Post &lt; ActiveRecord::Base
  attr_accessible :content, :name, :title</p>

<p>  validates :name,  :presence => true
  validates :title, :presence => true,</p>

<pre><code>                :length =&gt; { :minimum =&gt; 5 }
</code></pre>

<p>end
```</p>

<p>これらの変更はすべての Post が name と title を含み、かつ title が少なくとも5文字以上の長さである事を保障するでしょう。Rails はモデル内の様々な状態－存在、カラムの一意性、書式および関連オブジェクトの存在－をチェックすることができます。バリデーションについては <a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html">Active Record Validations and Callbacks</a> で詳しい情報が記載されています。</p>

<h3 id="6.6+コンソールを使用する">6.6 コンソールを使用する</h3>

<p>実際にバリデーションの動作を見るために、コンソールを使用する事ができます。コンソールはコマンドラインツールでアプリケーションのコンテキストに沿った Ruby のコードを実行することができます。</p>

<p>デフォルトのコンソールはデータベースを変更してしまうので、代わりに <code>rails console --sandbox</code> コマンドを使用して、どのような変更を加えてもロールバックできるようにします。</p>

<p>コンソールが読み込まれた後に、Model で作業し使用する事ができます。 実際にコンソールを起動してみます。コンソールは入力と出力結果がわかりやすいように改行を加えてあります。</p>

<p>```bash
$ rails console --sandbox
Loading development environment in sandbox (Rails 3.2.12)
Any modifications you make will be rolled back on exit</p>

<p>1.9.3-p392 :001 > p = Post.new(content: "A new post")
 => #<Post id: nil, name: nil, title: nil, content: "A new post", created_at: nil, updated_at: nil></p>

<p>1.9.3-p392 :002 > p.save
   (0.1ms)  SAVEPOINT active_record_1
   (0.1ms)  ROLLBACK TO SAVEPOINT active_record_1
 => false</p>

<p>1.9.3-p392 :003 > p.errors.full_messages
 => ["Name can't be blank", "Title can't be blank", "Title is too short (minimum is 5 characters)"]</p>

<p>1.9.3-p392 :004 > exit
   (0.2ms)  rollback transaction
```</p>

<p>上記の実行結果が示すのは、新しい Post のインスタンスを作成し、それを保存しようと試みて、その戻り値として false が返り(保存が失敗したことを示しています)、そして、Post の errors の中身を検査しているということです。</p>

<p>一通り操作が終われば、<code>exit</code> と入力してコンソールを終了します。</p>

<p>development Web サーバーとは違い、コンソールはそれぞれの行毎に自動的にコードを新たに読み込みません。コンソールを開いている間に、(エディタで) Model を変更させたい場合には、<code>reload!</code> とコンソールのプロンプト上で入力すると、Model の変更が読み込まれます。</p>

<p>今回のまとめは、以下の通りです。</p>

<ul>
<li>Model の中身を見て、`ActiveRecord::Base を継承していることを確認した</li>
<li>Model の属性にアクセスするために <code>attr_accessible</code> を定義していることを確認した</li>
<li>Model にバリデーションを追加した</li>
<li><code>rails console --sandbox</code> でコンソールを実行し、ロールバックをして終了した</li>
</ul>


<p>切りがいいので、次回に続きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RailsGuides] #03 Scaffold で素早く立ち上げる]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/02/rorguide03-getting-up-and-running-quickly-with-scaffolding/"/>
    <updated>2013-05-02T19:59:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/02/rorguide03-getting-up-and-running-quickly-with-scaffolding</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/02/rorguide02-say-hello/">前回</a> では、"Hello, Rails" を表示するために、Controller と View を作成し、アプリケーションのルートにルーティングするようにしました。今回は Scaffold でアプリケーションの雛形を作成してみます。</p>

<!-- more -->


<p>
  <ul>

  <ul>
  <li><a href="#5+Scaffolding+で立ち上げ素早く実行する">5 Scaffolding で立ち上げ素早く実行する</a>  </li>
  <li><a href="#6+Resource+を作成する">6 Resource を作成する</a>
   <ul>
   <li><a href="#6.1+マイグレーションを実行する">6.1 マイグレーションを実行する</a>   </li>
   <li><a href="#6.2+リンクを追加する">6.2 リンクを追加する</a>   </li>
   <li><a href="#6.3+ブラウザでの+Posts+の動作">6.3 ブラウザでの Posts の動作</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<h2 id="5+Scaffolding+で立ち上げ素早く実行する">5 Scaffolding で立ち上げ素早く実行する</h2>

<p>Rails の Scaffolding アプリケーションの主要な部分を生成する手っ取り早い方法です。単一の操作だけの新しい Resource のための Model、View、Controller を作成したいと考えている場合は、Scaffolding は役に立つツールになります。</p>

<p>ちなみに Scaffolding は「足場を組む」という意味だそうです。</p>

<h2 id="6+Resource+を作成する">6 Resource を作成する</h2>

<p>blog アプリケーションのケースでは、Post リソースのための Scaffold を生成するところから始める事ができます。（これは単一の blog への投稿を表現しています。）</p>

<p>これを行うために、次のコマンドをターミナルで実行します。
```bash Postのリソースを作成する
$ rails generate scaffold Post name:string title:string content:text</p>

<pre><code>  invoke  active_record
  create    db/migrate/20130505013444_create_posts.rb
  create    app/models/post.rb
  invoke    test_unit
  create      test/unit/post_test.rb
  create      test/fixtures/posts.yml
  invoke  resource_route
   route    resources :posts
  invoke  scaffold_controller
  create    app/controllers/posts_controller.rb
  invoke    erb
  create      app/views/posts
  create      app/views/posts/index.html.erb
  create      app/views/posts/edit.html.erb
  create      app/views/posts/show.html.erb
  create      app/views/posts/new.html.erb
  create      app/views/posts/_form.html.erb
  invoke    test_unit
  create      test/functional/posts_controller_test.rb
  invoke    helper
  create      app/helpers/posts_helper.rb
  invoke      test_unit
  create        test/unit/helpers/posts_helper_test.rb
  invoke  assets
  invoke    coffee
  create      app/assets/javascripts/posts.js.coffee
  invoke    scss
  create      app/assets/stylesheets/posts.css.scss
  invoke  scss
  create    app/assets/stylesheets/scaffolds.css.scss
</code></pre>

<p>```</p>

<p>Scaffold ジェネレータはいくつかのフォルダに沿って、アプリケーションの中に数個(上の実行結果では 16)のファイルを生成し、<code>config/routs.rb</code> を編集します。</p>

<p>以下は Scaffold で何が生成されるかを早見表にまとめたものです。実行結果を見ると Rails ではオブジェクトをひとまとめにしたものを複数形として扱っている事に気づくでしょう。今回の場合では、Post が Post<strong>s</strong> になっています。</p>

<table>
  <tr><th>ファイル名</th><th>目的</th></tr>
  <tr><td>db/migrate/20130505013444_create_posts.rb</td><td>データベースに Post を作成するためのマイグレーション(実行した環境でタイムスタンプが異なります)
  </td></tr>
  <tr><td>app/models/post.rb</td><td>Post の Model</td></tr>
  <tr><td>test/unit/post_test.rb</td><td>Post の Model のための単体テストハーネス</td></tr>
  <tr><td>test/fixtures/posts.yml</td><td>テストで使用するサンプルの Post</td></tr>
  <tr><td>config/routs.rb</td><td>Post へのルーティング情報を含むように編集された</td></tr>
  <tr><td>app/controllers/posts_controller.rb</td><td>Posts Controller</td></tr>
  <tr><td>app/views/posts/index.html.erb</td><td>すべての Post の一覧を表示するための View</td></tr>
  <tr><td>app/views/posts/edit.html.erb</td><td>すでにある Post を編集するための View</td></tr>
  <tr><td>app/views/posts/show.html.erb</td><td>ひとつの Post を表示するための View</td></tr>
  <tr><td>app/views/posts/new.html.erb</td><td>Post を新規作成するための View</td></tr>
  <tr><td>app/views/posts/_form.html.erb</td><td>編集と新規作成で使用されるフォームのルック＆フィール全体を制御するための部品</td></tr>
  <tr><td>test/functional/posts_controller_test.rb</td><td>Post Controller のための機能テストハーネス</td><tr>
  <tr><td>app/helpers/posts_helper.rb</td><td>Post View で使用されるヘルパー機能を集めたもの</td></tr>
  <tr><td>test/unit/helpers/posts_helper_test.rb</td><td>posts_helper のための単体テストハーネス</td></tr>
  <tr><td>app/assets/javascripts/posts.js.coffee</td><td>Post Controller のための CoffeScript</td></tr>
  <tr><td>app/assets/stylesheets/posts.css.scss</td><td>Post Controller で使用する CSS</td></tr>
  <tr><td>app/assets/stylesheets/scaffolds.css.scss</td><td>Scaffold の View の見た目を浴するための CSS</td></tr>
</table>


<p>Scaffold はアプリケーションを素早く立ち上げ、実行することができますが、生成されたコードはご自分のアプリケーションには完全にはそぐわないでしょう。ほとんどは、生成されたコードをカスタマイズすることになります。</p>

<p>多くの経験をつんだ Rails 開発者は完全に Scaffold を避けて、全部もしくは大部分のコードをスクラッチから書き上げます。しかしながら、Rails は生成された Model、Controller、View やその他のソースのテンプレートをシンプルにカスタマイズさせてくれます。</p>

<p>より詳しい情報に関しては、<a href="http://guides.rubyonrails.org/generators.html">Creating and Customizing Rails Generators &amp; Templates</a> を参照すると良いでしょう。</p>

<h3 id="6.1+マイグレーションを実行する">6.1 マイグレーションを実行する</h3>

<p><code>rails generate scaffold</code> コマンドで生成されたもののひとつに、<em>データベース・マイグレーション</em> が含まれます。マイグレーションは Ruby のクラスで、データベーステーブルを作成したり変更するのをシンプルにするために設計されたものです。Rails はマイグレーションを実行するのに <code>rake</code> コマンドを使用し、データベースにマイグレーションを実行した後にも取り消せるようになっています。マイグレーションのファイル名はタイムスタンプが含まれ、生成された順番に実行することを保証します。</p>

<p>先程生成された db/migrate/20130505013444_create_posts.rb を見てみましょう。
```ruby db/migrate/20130505013444_create_posts.rb
class CreatePosts &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :posts do |t|
  t.string :name
  t.string :title
  t.text :content

  t.timestamps
end
</code></pre>

<p>  end
end
```</p>

<p>上記のマイグレーションは、change と名づけられたこのマイグレーションを実行する時に呼ばれるメソッドを定義しています。change メソッドは元に戻せる動作も定義しています。つまり、Rails は－後になって変更を元に戻したい場合に－このマイグレーションによってなされた変更を、逆の順番で実行する方法を把握していることを意味しています。</p>

<p>Rails のマイグレーションについてのより詳しい情報は <a href="http://guides.rubyonrails.org/migrations.html">Migrations</a> を参照してください。</p>

<p>現時点で、マイグレーションを実行するための <code>rake</code> コマンドを使用する事ができます。コマンドを実行してみましょう。
<code>bash マイグレーションの実行
$ rake db:migrate
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -&gt; 0.0020s
==  CreatePosts: migrated (0.0021s) ===========================================
</code></p>

<p>Posts テーブルが作成されました。</p>

<p>デフォルトでは、<code>development</code> 環境で作業しているので、先程のコマンドは <code>config/database.yml</code> の development section で定義されているデータベースに適用されます。他の環境でマイグレーションを実行したい場合には、例えば <code>production</code> 環境では <code>rake db:migrate RAILS_ENV=production</code> と明示的に環境を指定する必要があります。</p>

<h3 id="6.2+リンクを追加する">6.2 リンクを追加する</h3>

<p>既に作成したホームページに Posts を連携するために、ホームページにリンクを追加してみましょう。app/views/home/index.html.erb を開き、以下のように修正します。
```erb app/views/home/index.html.erb</p>

<h1>Hello, Rails!</h1>


<p>&lt;%= link_to "My Blog", posts_path %>
```</p>

<p>蛇足ですが、前のサンプルでは Rails の後ろに "!" がついていなかったように記憶しているのですが、気のせいでしょうか。</p>

<p>link_to メソッドは Rails の組み込み View ヘルパーの一つです、表示するためのテキストと行き先に基づいてハイパーリンクを生成－この場合は Posts へのパス－sします。</p>

<h3 id="6.3+ブラウザでの+Posts+の動作">6.3 ブラウザでの Posts の動作</h3>

<p>さて、Postsの動作確認ができる準備が整いました。ブラウザでアクセスして、"My Blog" へのリンクをクリックしてみましょう。WEBrick を起動してない場合は <code>rails server</code> で WEBrick を起動します。</p>

<p><img src="/images/rails_guides/hello-rails-with-my-blog-link.jpg" title="Hello, Rails" alt="Hello, Rails"></p>

<p><img src="/images/rails_guides/listing-posts.jpg" title="Listing posts" alt="Listing posts"></p>

<p>これまでの一連の流れをまとめると、</p>

<ul>
<li><code>rails generate scaffold Post name:string title:string content:text</code> を実行して、Scaffolding で雛形を作成した</li>
<li><code>rake db:migrate</code> で Posts テーブルを作成した</li>
<li>app/view/home/index.html.erb を編集して、Posts へのリンクを作成した</li>
<li>ブラウザを起動して動作確認を行った</li>
</ul>


<p>ということになります。</p>

<p>切りがいいので <a href="/blog/2013/05/05/rorguide04-model/">次回</a> に続きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RailsGuides] #02 Rails で Hello を実行する]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/02/rorguide02-say-hello/"/>
    <updated>2013-05-02T18:11:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/02/rorguide02-say-hello</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/02/rorguide01-creating-a-new-rails-project/">前回</a> に引き続いて <a href="http://guides.rubyonrails.org/getting_started.html">RailsGuides</a> の日本語の抜粋などを記述していきます。前回と同様に見出しは RailsGuides に準じます。</p>

<!-- more -->


<p>
   <ul>

   <ul>

   <ul>
   <li><a href="#4.2+Rails+で++Hello++と言う">4.2 Rails で &ldquo;Hello&rdquo; と言う</a>   </li>
   <li><a href="#4.3+アプリケーションのホームページを設定する">4.3 アプリケーションのホームページを設定する</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<h3 id="4.2+Rails+で++Hello++と言う">4.2 Rails で "Hello" と言う</h3>

<p>Rails で "Hello" というために、最低限の Controller と View を作成します。以下のコマンドを実行します。</p>

<p>```bash
$ rails generate controller home index</p>

<pre><code>  create  app/controllers/home_controller.rb
   route  get "home/index"
  invoke  erb
  create    app/views/home
  create    app/views/home/index.html.erb
  invoke  test_unit
  create    test/functional/home_controller_test.rb
  invoke  helper
  create    app/helpers/home_helper.rb
  invoke    test_unit
  create      test/unit/helpers/home_helper_test.rb
  invoke  assets
  invoke    coffee
  create      app/assets/javascripts/home.js.coffee
  invoke    scss
  create      app/assets/stylesheets/home.css.scss
</code></pre>

<p>```
出力を見ると Controller と View に加えて、単体テスト、ヘルパーモジュール、CoffeScript、CSS のテンプレートが作成されていることに気づくでしょう。</p>

<p>次に、好きなエディタで <code>app/views/home/index.html.erb</code> を編集します。私の場合は <code>vim app/views/home/index.html.erb</code>です。</p>

<p>```erb app/views/home/index.html.erb</p>

<h1>Hello, Rails</h1>


<p>```</p>

<h3 id="4.3+アプリケーションのホームページを設定する">4.3 アプリケーションのホームページを設定する</h3>

<p>Controller と View を作成しましたが、"Hello Rails!" を表示させたい時に Rails に指示する必要があります。この場合では、"Welcom Aboard" スモークテスト の変わりに URL のルート(例えば、http://localhost:3000 のように)に表示させたいと思います。</p>

<p>まず最初に、デフォルトページを削除します。私の場合は <code>git rm public/index.html</code> で Git から削除しましたが、Git を使わない場合は <code>rm public/index.html</code> です。
<code>bash
git rm public/index.html
</code></p>

<p>次に Rails に実際のホームページがどこかを指示する必要があります。 <code>config/routes.rb</code> をエディタで開いて編集します。以下に編集箇所を diff で示します。
```diff config/routes.rb
@@ -48,7 +50,7 @@ Blog::Application.routes.draw do</p>

<p>   # You can have the root of your site routed with "root"
   # just remember to delete public/index.html.
-  # root :to => 'welcome#index'
+  root :to => 'home#index'</p>

<p>   # See how all your routes lay out with "rake routes"</p>

<p>```</p>

<p>Rails を起動してない場合は <code>rails server</code> で WEBrick を起動して、ブラウザでルート (http://localhost:3000/ など) で接続確認します。</p>

<p><img src="/images/rails_guides/say-hello.jpg" title="Hello, Rails" alt="Hello, Rails"></p>

<p><code>config/routes.rb</code> は特殊な DSL として、入ってきたリクエストを Controller や Action にどのように接続するかを指示するエントリをアプリケーションのルーティングファイルとして定義します。先ほど編集した `root :to => "home#index" は、ルートアクションを home コントローラーの index アクションへマップするように指示しています。</p>

<p>ルーティングについてのより詳しい情報については <a href="http://guides.rubyonrails.org/routing.html">Rails Routing from the Outside in</a> を参照してください。</p>

<p><a href="/blog/2013/05/02/rorguide03-getting-up-and-running-quickly-with-scaffolding">次回</a> に続きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RailsGuides] #01 RailsGuides で Rails をはじめてみる]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/02/rorguide01-creating-a-new-rails-project/"/>
    <updated>2013-05-02T08:56:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/02/rorguide01-creating-a-new-rails-project</id>
    <content type="html"><![CDATA[<p>ちゃんと <a href="http://rubyonrails.org/">Ruby on Rails</a> (以下、Railsと略します) を覚えていないので、 <a href="http://guides.rubyonrails.org/">RailsGuides</a> をはじめてみました。この記事自体は、誰にメリットがあるかわからない内容ですが、ここでは RailsGuide の日本語での抜粋と実際に手順にに沿ってやってみたことなどなどを、その都度だらだらと書いていきます。ちゃんとした和訳をお探しの方は、以下のサイトを参照すると良いと思います。</p>

<ul>
<li><a href="http://wiki.usagee.co.jp/ruby/rails/RailsGuides%E3%82%92%E3%82%86%E3%81%A3%E3%81%8F%E3%82%8A%E5%92%8C%E8%A8%B3%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/Getting%20Started%20with%20Rails">ruby/rails/RailsGuidesをゆっくり和訳してみたよ/Getting Started with Rails</a></li>
</ul>


<!-- more -->


<p>
  <ul>

  <ul>
  <li><a href="#Rails+の環境">Rails の環境</a>  </li>
  <li><a href="#1+このガイドの前提">1 このガイドの前提</a>  </li>
  <li><a href="#2+Rails+とは何か？">2 Rails とは何か？</a>  </li>
  <li><a href="#3+Rails+プロジェクトを新規作成する">3 Rails プロジェクトを新規作成する</a>
   <ul>
   <li><a href="#3.1+Rails+のインストール">3.1 Rails のインストール</a>   </li>
   <li><a href="#3.2+blog+アプリケーションを作成する">3.2 blog アプリケーションを作成する</a>   </li>
  </ul>
  </li>
 </ul>
 <li><a href="#（中略）">（中略）</a> </li>
 <li><a href="#（中略）">（中略）</a>
   <ul>

   <ul>
   <li><a href="#3.3+データベースを設定する">3.3 データベースを設定する</a>   </li>
   <li><a href="#3.4+データベースを作成する">3.4 データベースを作成する</a>   </li>
  </ul>
  </li>
 </ul>
 <li><a href="#以下スタックトレース">以下スタックトレース</a>
  <ul>
  <li><a href="#4+Hello,+Rails!">4 Hello, Rails!</a>
   <ul>
   <li><a href="#4.1+Web+サーバーを起動する">4.1 Web サーバーを起動する</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<p>幸いにも RailsGuides は mobi 形式でも配布されているので、Kindle for iPad を横に置きながらぼちぼちとやっていきます。</p>

<p>ちなみに <a href="http://guides.rubyonrails.org/">原文</a> は <a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-Share Alike 3.0</a> の元で公開されています。</p>

<h2 id="Rails+の環境">Rails の環境</h2>

<p>いろいろなサイトがあるので、"rails 入門" や "rails インストール" などのキーワードで検索すれば、きっとインストールの仕方など、ご自分の環境にあった情報が得られるでしょう。</p>

<p>私の環境は、以下の通りとなっております。
```bash Rails実行環境
$ ohai platform platform_version
[
  "centos"
]
[
  "6.3"
]</p>

<p>$ rvm --version</p>

<p>rvm 1.18.21 (master) by Wayne E. Seguin <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#58;&#x77;&#x61;&#121;&#x6e;&#101;&#101;&#x73;&#x65;&#x67;&#117;&#x69;&#x6e;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#119;&#x61;&#121;&#x6e;&#101;&#x65;&#x73;&#101;&#x67;&#x75;&#x69;&#x6e;&#64;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a>, Michal Papis <a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#58;&#109;&#x70;&#97;&#x70;&#x69;&#115;&#64;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x6d;&#112;&#97;&#x70;&#105;&#115;&#x40;&#103;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a> [https://rvm.io/]</p>

<p>$ ruby --version
ruby 1.9.3p392 (2013-02-22 revision 39386) [i686-linux]</p>

<p>$ rails --version
Rails 3.2.12
```</p>

<p>以下、見出しは基本的に RailsGuides の見出しに準じます。</p>

<h2 id="1+このガイドの前提">1 このガイドの前提</h2>

<p>対応する Ruby のバージョンと前提としている Rails のバージョンについて記述しています。Ruby 1.9.2 系 と Rails 3.2 系をインストールしていれば、ほぼ問題なく動作すると思います。それに加えて、まず Ruby を覚えてから Rails をやった方がいいよなどと書かれていますが、<a href="http://www.google.co.jp/#hl=en&amp;gs_rn=11&amp;gs_ri=psy-ab&amp;gs_is=1&amp;cp=6&amp;gs_id=18&amp;xhr=t&amp;q=%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AERuby&amp;es_nrs=true&amp;pf=p&amp;safe=off&amp;output=search&amp;sclient=psy-ab&amp;oq=%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AERu&amp;gs_l=&amp;pbx=1&amp;bav=on.2,or.r_qf.&amp;bvm=bv.45921128,d.dGI&amp;fp=345ec6be39cf6daf&amp;biw=1167&amp;bih=552">初めてのRuby</a>を読んでいれば理解できると思います。わからなければ、その都度検索エンジンのお世話になれば良いではないですか。</p>

<h2 id="2+Rails+とは何か？">2 Rails とは何か？</h2>

<p>Rails の特徴などが書かれています。省略します。</p>

<p>Rails は「生産性が高い」、「すぐにアプリケーションを作成できる」などといわれていますが、Web アプリケーションフレームワークなので、個人的には比較的学習コストが高いと思います。よく Rails の特徴として <strong>「設定より規約を」</strong> と言われています。誤解を恐れずに言うならば、つまりは<strong>規約を覚えなければ話にならない</strong>わけです。</p>

<p>以下については、このガイドに説明があるので、単語だけ覚えるだけにとどめて、ガイドを読み進めるうちに覚えるか、検索エンジンのお世話になるかすれば良いと思います。最初からわかっていれば入門ガイドのお世話になる必要もありませんしね。</p>

<ul>
<li>Action Pack

<ul>
<li>Action Controller</li>
<li>Action Dispatch</li>
<li>Action View</li>
</ul>
</li>
<li>Action Mailer</li>
<li>Action Model</li>
<li>Action Record</li>
<li>Action Resource</li>
<li>Action Support</li>
<li>Railties</li>
</ul>


<h2 id="3+Rails+プロジェクトを新規作成する">3 Rails プロジェクトを新規作成する</h2>

<h3 id="3.1+Rails+のインストール">3.1 Rails のインストール</h3>

<p>RubyGems からインストールするのが簡単です。
<code>bash
gem install rails
</code></p>

<p>Windows を使用している人は Ruby と Rails を <a href="http://railsinstaller.org/">Rails Installer</a> で簡単にインストールできます。</p>

<h3 id="3.2+blog+アプリケーションを作成する">3.2 blog アプリケーションを作成する</h3>

<p>私は GitHub 用にソースファイルをアップする予定なので、github というそのままの名前のディレクトリに <code>rails new</code> で作成する予定の blog というディレクトリを作成しました。Git の話を絡めるとややこしくなるので、リポジトリの作成と最初の push のコマンドまではここに記述しますが、これ以降は Git のコマンド等の話は省略します。蛇足になりますが、私は GitHub でリポジトリをあらかじめ作成しました。</p>

<p><code>bash あらかじめblogディレクトリを作成して下準備をする
$ cd ~/github
$ mkdir blog
$ git init blog
$ cd blog
$ touch README.md
$ git add .
$ git commit -m 'Initial commit.'
$ git remote add origin git@github.com:toshibohjp/blog.git
$ git push -u origin master
</code></p>

<p>以下のように blog アプリケーションを作成します。</p>

<p>```bash blogアプリケーションを作成する
$ cd ~/github
$ rails new blog</p>

<pre><code>   exist
  create  README.rdoc
  create  Rakefile
  create  config.ru
  create  .gitignore
  create  Gemfile
  create  app
</code></pre>

<h1 id="（中略）">（中略）</h1>

<pre><code>     run  bundle install
</code></pre>

<p>Fetching gem metadata from https://rubygems.org/...........
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Using rake (10.0.4)</p>

<h1 id="（中略）">（中略）</h1>

<p>Installing sass-rails (3.2.6)
Installing sqlite3 (1.3.7)
Installing uglifier (2.0.1)
Your bundle is complete!
Use <code>bundle show [gemname]</code> to see where a bundled gem is installed.
<code>
上記のような出力で Rails アプリケーションが作成されたので、ディレクトリの中身を覗いてみましょう。README.md 以外は `rails new blog` で作成されたファイルですが、たくさんありますね。何がなにやらよくわかりません。
</code>bash railsのフォルダ構成
$ cd blog
$ tree -L 2 -F
.
├── Gemfile
├── Gemfile.lock
├── README.md
├── README.rdoc
├── Rakefile
├── app/
│   ├── assets/
│   ├── controllers/
│   ├── helpers/
│   ├── mailers/
│   ├── models/
│   └── views/
├── config/
│   ├── application.rb
│   ├── boot.rb
│   ├── database.yml
│   ├── environment.rb
│   ├── environments/
│   ├── initializers/
│   ├── locales/
│   └── routes.rb
├── config.ru
├── db/
│   └── seeds.rb
├── doc/
│   └── README_FOR_APP
├── lib/
│   ├── assets/
│   └── tasks/
├── log/
├── public/
│   ├── 404.html
│   ├── 422.html
│   ├── 500.html
│   ├── favicon.ico
│   ├── index.html
│   └── robots.txt
├── script/
│   └── rails*
├── test/
│   ├── fixtures/
│   ├── functional/
│   ├── integration/
│   ├── performance/
│   ├── test_helper.rb
│   └── unit/
├── tmp/
│   └── cache/
└── vendor/</p>

<pre><code>├── assets/
└── plugins/
</code></pre>

<p>30 directories, 21 files
```
RailsGuides の説明によると、ファイルとフォルダ構成は以下のようになってます。</p>

<table>
  <tr><th>ファイル／フォルダ名</th><th>目的</th></tr>
  <tr><td>app/</td><td>アプリケーションで使用する Controller, Model, View, Asset を含みます。このガイドの残りでは、このフォルダに焦点を当てます。
  </td></tr>
  <tr><td>config/</td><td>アプリケーションの実行時のルール、ルーティング、データベースなどを設定します。config/ に関しては Configureing Rails Applications で詳細を扱います。
  </td></tr>
  <tr><td>config.ru</td><td>Rack の設定です。Rack ベースのサーバーがアプリケーションを開始するのに使用します。
  </td></tr>
  <tr><td>db/</td><td>現在のデータベーススキーマとしてデータベースマイグレーションを含んでいます。
  </td></tr>
  <tr><td>doc/</td><td>アプリケーションの詳細なドキュメント</td></tr>
  <tr><td>Gemfile<br />Gemfile.lock</td><td>アプリケーションに必要な gem の依存関係を指定する事ができます。
  </td></tr>
  <tr><td>lib/</td><td>アプリケーションの拡張モジュール
  </td></tr>
  <tr><td>log/</td><td>アプリケーションログ</td></tr>
  <tr><td>public/</td><td>そのまま公開される唯一のフォルダです。静的なファイルと生成された Assets を含みます。</td>
  </tr>
  <tr><td>Rakefile</td><td>このファイルはコマンドラインから実行されるタスクを見つけて読み込みます。タスクの定義は Rails のコンポーネントを通して定義されます。Rakefile を変更するよりも、アプリケーションの lib/tasks ディレクトリにファイルを追加することで、タスクを追加するようにしてください。
  </td></tr>
  <tr><td>README.rdoc</td><td>アプリケーションの簡単な手順書です。アプリケーションが何をするかや、どのようにセットアップするかを、他の人に解るようにこのファイルを編集してください。
  </td></tr>
  <tr><td>script/</td><td>アプリケーションを起動する Rails のスクリプトを含みます。また、アプリケーションをデプロイ／実行するスクリプトを含めることもできます。
  </td></tr>
  <tr><td>test/</td><td>単体テスト、Fixture および 他のテストの仕組みです。これらについては Testing Rails Applications で扱います。
  </td></tr>
  <tr><td>tmp/</td><td>一時ファイル</td></tr>
  <tr><td>vendor/</td><td>サードパーティのコードを置くためのディレクトリです。典型的な Rails アプリケーションでは、Ruby Gems、 Rails のソースコード(プロジェクトに任意でインストールした場合)や追加パッケージ機能を含むプラグインをインクルードしています。
  </td></tr>
</table>


<h3 id="3.3+データベースを設定する">3.3 データベースを設定する</h3>

<p>データベースの設定は <code>config/database.yml</code> にあります。なにも設定してなければデフォルトでは SQLite3 用にデータベースが設定されています。デフォルトで以下の3つの環境で Rails を実行する事ができます。</p>

<ul>
<li><code>development</code> : 手動でインタラクティブに実行するためのローカル開発用の環境</li>
<li><code>test</code> : 自動テストを実行するための環境</li>
<li><code>production</code> : アプリケーションをデプロイして公開するための環境</li>
</ul>


<p><code>rails new blog --database=mysql</code> でデータベースを指定することも可能ですし、手動で設定すべきではありません。</p>

<p>SQLiter3、MySQL、PostgreSQL、SQLiter3 + JRuby、MySQL + JRuby、PostgreSQL + JRuby の設定が記述されていましたが、今はデフォルトの SQLite3 で充分なため割愛します。</p>

<h3 id="3.4+データベースを作成する">3.4 データベースを作成する</h3>

<p>以下のコマンドで空のデータベースを作成します。
<code>``bash
$ rake db:create
Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes.
/usr/local/rvm/gems/ruby-1.9.3-p392/gems/execjs-1.4.0/lib/execjs/runtimes.rb:51:in</code>autodetect'</p>

<h1 id="以下スタックトレース">以下スタックトレース</h1>

<p>```</p>

<p>失敗しました。</p>

<p>JavaScript の実行環境がないと言っています。私もインストールした覚えはありません。上記のサイトを見てみるといろいろ実行エンジンがありますが、ここでは一番上にある therubyracer を使うことにします。</p>

<p>次のように Gemfile の末尾に以下を追加して、<code>bundle</code> を実行して therubyracer をダウンロードして、もう一度 <code>rake db::create</code> を実行します。</p>

<p><code>bash
$ echo "gem 'therubyracer'" &gt;&gt; Gemfile
$ bundle
$ rake db:create
</code></p>

<p>何も出力がありませんが、これでデータベースは作成されました。以下のファイルが追加されたはずです。</p>

<ul>
<li>db/development.sqlite3</li>
<li>db/test.sqlite3</li>
</ul>


<h2 id="4+Hello,+Rails!">4 Hello, Rails!</h2>

<h3 id="4.1+Web+サーバーを起動する">4.1 Web サーバーを起動する</h3>

<p>これで Rails を実行できる環境が整ったので、Rails を実行してみます。以下のような出力結果が得られます。</p>

<p><code>bash
$ rails server
=&gt; Booting WEBrick
=&gt; Rails 3.2.12 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2013-05-02 15:26:50] INFO  WEBrick 1.3.1
[2013-05-02 15:26:50] INFO  ruby 1.9.3 (2013-02-22) [i686-linux]
[2013-05-02 15:26:50] INFO  WEBrick::HTTPServer#start: pid=8821 port=3000
</code></p>

<p>WEBrick という Web サーバーが3000番ポートで起動してしたので、ブラウザでアクセスしてみます。</p>

<p><img src="/images/rails_guides/hello-rails.jpg" title="Rails default page" alt="Rails default page"></p>

<p>上手く表示されました。</p>

<p>Web サーバーを停止するには、起動したコンソールで &lt;Control + C&gt; を押します。また、development モードでは、サーバーがファイルの変更を自動的に検知するので、ファイルの変更の度に Rails を停止する必要はありません。</p>

<p>ちなみにこのページはスモークテストです。スモークテストとは一通り開発を終えた段階で簡易に起動確認を行う予備的なテストのことです。</p>

<p>切りがいいので、今回はこのあたりで<a href="../rorguide02-say-hello/">次回</a>へ続きます。</p>
]]></content>
  </entry>
  
</feed>
