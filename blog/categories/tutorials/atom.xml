<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorials | Tortoise-like pace]]></title>
  <link href="http://toshibohjp.github.io/blog/categories/tutorials/atom.xml" rel="self"/>
  <link href="http://toshibohjp.github.io/"/>
  <updated>2013-05-29T21:44:22+09:00</updated>
  <id>http://toshibohjp.github.io/</id>
  <author>
    <name><![CDATA[toshibohjp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[RoRGuides] #07 個々の Post を表示する]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/12/rorguide07-showing-an-individual-post/"/>
    <updated>2013-05-12T12:00:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/12/rorguide07-showing-an-individual-post</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/06/rorguide05-listing-all-posts/">前回</a> は、Post を新規作成する仕組みについて見て来ました。今回は、他の Post の操作について見て行きたいと思います。</p>

<!-- more -->


<p>
   <ul>

   <ul>

   <ul>
   <li><a href="#6.3+個々の+Post+を表示する">6.3 個々の Post を表示する</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<h3 id="6.3+個々の+Post+を表示する">6.3 個々の Post を表示する</h3>

<p>index ページにある任意の Post の <code>show</code> リンクをクリックした場合は、<code>http://localhost:3000/posts/1</code> のような URL に遷移します。Rails はそのリソースのための <code>show</code> アクションへの呼び出しとして解釈し、 <code>:id</code> パラメータとして 1 を渡します。<code>show</code> アクションについては、以下のとおりです。</p>

<p>```ruby app/controllers/posts_controller.rb
  # GET /posts/1
  # GET /posts/1.json
  def show</p>

<pre><code>@post = Post.find(params[:id])

respond_to do |format|
  format.html # show.html.erb
  format.json { render json: @post }
end
</code></pre>

<p>  end
```</p>

<p><code>show</code> アクションは、id の値でデータベース内にある単一のレコードを検索するために <code>Post.fild</code> を使用します。レコードを検索した後、Rails は <code>app/views/posts/show.html.erb</code> を使用して、検索結果を表示します。</p>

<p>```erb app/views/posts/show.html.erb</p>

<p id="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>


<%= link_to 'Edit', edit_post_path(@post) %> |
<%= link_to 'Back', posts_path %>
```

### 6.2 Posts を編集する

Post を新規作成したように、Post を編集するのも二段階のプロセスを踏みます。最初のステップは特定の Post に伴う `edit_post_path(@post)` へのリクエストです。これは、Controller ないの `edit` アクションを呼び出します。

```ruby app/controllers/posts_controller.rb
  # GET /posts/1/edit
  def edit
    @post = Post.find(params[:id])
  end
```

繰り返しになりますが、`new` アクションと同様に `edit` アクションは `form` Partial を使用しています。しかしながら、今回はフォームは `PostController` への PUT アクションを行い、送信ボタンは "Update Post" と表示するでしょう。

この View によって作成されたフォームを送信すると、Controller内の `update` アクションを呼び出すでしょう。

```ruby app/controllers/posts_controller.rb
  # PUT /posts/1
  # PUT /posts/1.json
  def update
    @post = Post.find(params[:id])

    respond_to do |format|
      if @post.update_attributes(params[:post])
        format.html { redirect_to @post, notice: 'Post was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end
```

`update` アクションの中では、Rails はまず、編集中のデータベースのレコードを見つけるために、`:id` パラメータを edit View から受け取ります。`update_attributes` の呼び出しでは、リクエストから Post のパラメータ(ハッシュ)を取得し、このレコードに適用します。すべてがうまくいった場合は、ユーザーは Post の `show` アクションへリダイレクトされます。なにか問題が会った場合には、問題を修正するために `edit` アクションに戻るようにリダイレクトされます。

### 6.3 Post を削除する
最後に、任意の Post の `destroy` リンクをクリックすると、`id` に関連する `destroy` アクションが呼び出されます。

```ruby app/controllers/posts_controller.rb
  # DELETE /posts/1
  # DELETE /posts/1.json
  def destroy
    @post = Post.find(params[:id])
    @post.destroy

    respond_to do |format|
      format.html { redirect_to posts_url }
      format.json { head :no_content }
    end
  end
```

Active Record の Model インスタンスにある `destroy` メソッドはデータベースから対応するレコードを削除します。削除を行った後、表示するレコードが無いので、Rails はユーザーのブラウザーを Controller の index アクションにリダイレクトします。

次回へ続きます。

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RoRGuides] #06 Post を新規作成する]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/06/rorguide06-creating-new-posts/"/>
    <updated>2013-05-06T11:14:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/06/rorguide06-creating-new-posts</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/06/rorguide05-listing-all-posts/">前回</a> は、Post オブジェクトはひとつも作ってませんが、一覧表示できるようにしました。今回は Post オブジェクトを新規作成するための仕組みを見てみましょう。</p>

<!-- more -->


<p>
   <ul>

   <ul>

   <ul>
   <li><a href="#6.9+Post+を新規作成する">6.9 Post を新規作成する</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<h3 id="6.9+Post+を新規作成する">6.9 Post を新規作成する</h3>

<p>新しい Post を新規作成することは二つのアクションを含みます。ひとつめは <code>new</code> アクションです。このアクションは空の Post オブジェクトを作成します。以下は、app/controllers/posts_controller.rb の一部です。</p>

<p>```ruby app/controllers/posts_controller.rb
  # GET /posts/new
  # GET /posts/new.json
  def new</p>

<pre><code>@post = Post.new

respond_to do |format|
  format.html # new.html.erb
  format.json { render json: @post }
end
</code></pre>

<p>  end
```</p>

<p>コード内に記述されている new.html.erb View は空の Post をユーザーに表示します。</p>

<p>```erb app/views/posts/new.html.erb</p>

<h1>New post</h1>


<p>&lt;%= render 'form' %></p>

<p>&lt;%= link_to 'Back', posts_path %>
```</p>

<p><img src="/images/rails_guides/create-new-post.jpg" title="'Creating a new Post.'" ></p>

<p><code>&lt;%= render 'form' %&gt;</code> の行は Rails の <em>Partial</em> についての最初の紹介です。Partial とは HTML と Ruby のコードのスニペットで、複数の場所で再利用ができます。この場合においては、 新しい Post を作成する form は基本的に Post を編集するものと同じものが使用されており、両方とも name と title を持つテキストフィールド、content のためのテキストエリア、そして Post を新規作成および既存の Post を更新するためのボタンを持っています。</p>

<p>app/views/posts/_form.html.erb ファイルを見ると、以下のようになっているでしょう。</p>

<p>```erb app/views/posts/_form.html.erb
&lt;%= form_for(@post) do |f| %>
  &lt;% if @post.errors.any? %></p>

<pre><code>&lt;div id="error_explanation"&gt;
  &lt;h2&gt;&lt;%= pluralize(@post.errors.count, "error") %&gt; prohibited this post from being saved:&lt;/h2&gt;

  &lt;ul&gt;
  &lt;% @post.errors.full_messages.each do |msg| %&gt;
    &lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;
  &lt;% end %&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>  &lt;% end %></p>

<p>  <div class="field"></p>

<pre><code>&lt;%= f.label :name %&gt;&lt;br /&gt;
&lt;%= f.text_field :name %&gt;
</code></pre>

<p>  </div>
  <div class="field"></p>

<pre><code>&lt;%= f.label :title %&gt;&lt;br /&gt;
&lt;%= f.text_field :title %&gt;
</code></pre>

<p>  </div>
  <div class="field"></p>

<pre><code>&lt;%= f.label :content %&gt;&lt;br /&gt;
&lt;%= f.text_area :content %&gt;
</code></pre>

<p>  </div>
  <div class="actions"></p>

<pre><code>&lt;%= f.submit %&gt;
</code></pre>

<p>  </div>
&lt;% end %>
```</p>

<p>Partial は呼び出し側の View ファイルで定義されたインスタンスのすべてを受け取ります。この場合では、Controller が新しい Post オブジェクトを <code>@post</code> に割り当て、このように <code>@post</code> として View と Partial の両方で利用可能になります。</p>

<p>Partial についてのより詳しい情報については、<a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Layouts and Rendering in Rails</a> ガイドを参照してください。</p>

<p><code>form_for</code> ブロックは HTML フォームを生成するために使用されます。このブロック内では、フォーム上の様々なコントロールを作成するためのメソッドにアクセスしています。例えば <code>f.text_field :name</code> は Rails にフォーム上にテキストボックスを作成し、表示されているインスタンスの <code>name</code> 属性につなげるように指示します。フォームの元になっている Model の属性(この場合においては <code>name</code>、<code>title</code>、そして <code>content</code>) とメソッドのみを使用できます。Rails はコードをより簡潔にするため、かつ明示的に特定の Model インスタンスへフォームを結びつけるために、あなたが記述した生の HTML より <code>form_for</code> を優先して使用します。</p>

<p><code>form_for</code> ブロックはまた、新しい Post や Post の編集をする場合では、充分にうまくこなすくらい賢く、HTML 出力内で <code>action</code> タグと「送信」 ボタンの名前を適切に設定します。</p>

<p>Model に結び付けられていない任意のフィールドを表示するように HTML フォームを作成する必要がある場合は、Model インスタンスに必ずしも関連付けらているわけではないフォームを作成するためのショートカットを提供する <code>form_for</code> メソッドを使用するべきです。</p>

<p>ユーザーがフォーム上で「Post の新規作成」ボタンをクリックしたときに、ブラウザは Controler の <code>create</code> アクションに情報を送り返すでしょう。(Rails はフォームが HTTP POST リクエストで送信されているので、 <code>create</code> アクションを呼ぶことを知っています。これが、前に言及した <strong>規約</strong> の一つです。)</p>

<p>対応する Controller のコードを以下に示します。</p>

<p>```ruby app/controllers/posts_controller.rb
  # POST /posts
  # POST /posts.json
  def create</p>

<pre><code>@post = Post.new(params[:post])

respond_to do |format|
  if @post.save
    format.html { redirect_to @post, notice: 'Post was successfully created.' }
    format.json { render json: @post, status: :created, location: @post }
  else
    format.html { render action: "new" }
    format.json { render json: @post.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end
```</p>

<p><code>create</code> アクションは Rails が <code>params</code> ハッシュ内で利用できるようにしたフォーム上で、ユーザーによって入力されたデータから新規の Post オブジェクトをインスタンス化しします。新しい Post の保存が正常に行われた後、<code>create</code> はユーザーが求めた適切なフォーマット(今回の場合は HTML)を返します。そのときに、結果としてもたらされる Post の <code>show</code> アクションへユーザーをリダイレクトし、そしてユーザーに Post が"Post was successfully created."(Post が正常に作成された)と通知します。</p>

<p><img src="/images/rails_guides/new-post-created.jpg" title="'Post was successfully created.'" ></p>

<p>バリデーションエラーによって、Post の保存が失敗した場合には、Controller は、ユーザーにエラーを修正し再試行できるように、エラーメッセージと共に <code>new</code> アクションを返します。</p>

<p><img src="/images/rails_guides/new-post-with-error-messages.jpg" title="'Listing Posts'" ></p>

<p>メッセージが他のアクションに持ち越せるように、また、リクエストの状態の上で有用な情報をユーザーに提供できるように、"Post was successfully created." メッセージは Rails の <code>flash</code> ハッシュ内に格納されます(通常、単に <em>flash</em> と呼ばれます)。<code>create</code> の場合においては、Post の生成プロセスの間に、ユーザーが実際にどのようなページがレンダリングされているかを見ることはないでしょう。これは、Rails がレコードを保存してすぐに、新しい Post にすぐさまリダイレクトされるからです。Flash はメッセージを次のアクションに持ち越します。ユーザーが <code>show</code> アクションにリダイレクトされたときに、"Post was successfully create." というメッセージが表示されるためです。</p>

<p><a href="/blog/05/12/rorguide07-showing-an-individual-post/">次回</a> に続きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RoRGuides] #05 すべての Posts を一覧にする]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/06/rorguide05-listing-all-posts/"/>
    <updated>2013-05-06T02:58:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/06/rorguide05-listing-all-posts</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/05/rorguide04-model/">前回</a> に引き続き Post Model を見ていきましょう。</p>

<!-- more -->


<p>
   <ul>

   <ul>

   <ul>
   <li><a href="#6.7+すべての+Posts+を一覧にする">6.7 すべての Posts を一覧にする</a>   </li>
   <li><a href="#6.8+レイアウトをカスタマイズする">6.8 レイアウトをカスタマイズする</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<h3 id="6.7+すべての+Posts+を一覧にする">6.7 すべての Posts を一覧にする</h3>

<p>アプリケーションで我々の Post のリストが表示されているかを確認するために、少し深く Rails のコードの中に潜ってみましょう。app/controllers/posts_controller.rb を開いて index アクションを見てみましょう。</p>

<p>```ruby app/controllers/posts_controller.rb
class PostsController &lt; ApplicationController
  # GET /posts
  # GET /posts.json
  def index</p>

<pre><code>@posts = Post.all

respond_to do |format|
  format.html # index.html.erb
  format.json { render json: @posts }
end
</code></pre>

<p>  end</p>

<p>  # GET /posts/1
  # GET /posts/1.json
  def show</p>

<pre><code>@post = Post.find(params[:id])

respond_to do |format|
  format.html # show.html.erb
  format.json { render json: @post }
end
</code></pre>

<p>  end</p>

<p>  # GET /posts
  # GET /posts.json
  def index</p>

<pre><code>@posts = Post.all

respond_to do |format|
  format.html # index.html.erb
  format.json { render json: @posts }
end
</code></pre>

<p>  end</p>

<p>  # GET /posts/1
  # GET /posts/1.json
  def show</p>

<pre><code>@post = Post.find(params[:id])

respond_to do |format|
  format.html # show.html.erb
  format.json { render json: @post }
end
</code></pre>

<p>  end</p>

<p>  # POST /posts
  # POST /posts.json
  def create</p>

<pre><code>@post = Post.new(params[:post])

respond_to do |format|
  if @post.save
    format.html { redirect_to @post, notice: 'Post was successfully created.' }
    format.json { render json: @post, status: :created, location: @post }
  else
    format.html { render action: "new" }
    format.json { render json: @post.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end</p>

<p>  # PUT /posts/1
  # PUT /posts/1.json
  def update</p>

<pre><code>@post = Post.find(params[:id])

respond_to do |format|
  if @post.update_attributes(params[:post])
    format.html { redirect_to @post, notice: 'Post was successfully updated.' }
    format.json { head :no_content }
  else
    format.html { render action: "edit" }
    format.json { render json: @post.errors, status: :unprocessable_entity }
  end
end
</code></pre>

<p>  end</p>

<p>  # DELETE /posts/1
  # DELETE /posts/1.json
  def destroy</p>

<pre><code>@post = Post.find(params[:id])
@post.destroy

respond_to do |format|
  format.html { redirect_to posts_url }
  format.json { head :no_content }
end
</code></pre>

<p>  end
end</p>

<p>  # GET /posts
  # GET /posts.json
  def index</p>

<pre><code>@posts = Post.all

respond_to do |format|
  format.html # index.html.erb
  format.json { render json: @posts }
end
</code></pre>

<p>  end</p>

<p>  # GET /posts/1
  # GET /posts/1.json
  def show</p>

<pre><code>@post = Post.find(params[:id])

respond_to do |format|
  format.html # show.html.erb
  format.json { render json: @post }
end
</code></pre>

<p>  end
```</p>

<p>長いコードになりましたが、ここでの重要部分は以下のコードです。
```ruby app/controllers/posts_controller.rb
  # GET /posts
  # GET /posts.json
  def index</p>

<pre><code>@posts = Post.all

respond_to do |format|
  format.html # index.html.erb
  format.json { render json: @posts }
end
</code></pre>

<p>  end
```</p>

<p><code>Post.all</code> は現在のデータベース内にあるすべての Posts を、 @posts で呼ばれたインスタンス変数を格納している Post レコードの配列として返します。</p>

<p>ActiveRecord を使ってレコードを検索するより詳しい情報については、<a href="http://guides.rubyonrails.org/active_record_querying.html">Active Record Query Interface</a> を参照してください。</p>

<p><code>respond_to</code> ブロックは、HTML と JSON が呼び出すアクションの両方を処理します。仮に、http://localhost:3000/posts.json をブラウザで参照した場合は、JSON 形式のすべての Posts が表示されることでしょう。HTML 形式はアクション名に対応する名前を持つ app/views/posts/ 内の View を見つけます。Rails は View が利用可能なように、アクションからすべてのインスタンス変数を作成します。ここで、app/view/posts/index.html.erb を見てみましょう。</p>

<p>```erb app/view/posts/index.html.erb</p>

<h1>Listing posts</h1>




<table>
  <tr>
    <th>Name</th>
    <th>Title</th>
    <th>Content</th>
    <th></th>
    <th></th>
    <th></th>
  </tr>

<% @posts.each do |post| %>
  <tr>
    <td><%= post.name %></td>
    <td><%= post.title %></td>
    <td><%= post.content %></td>
    <td><%= link_to 'Show', post %></td>
    <td><%= link_to 'Edit', edit_post_path(post) %></td>
    <td><%= link_to 'Destroy', post, method: :delete, data: { confirm: 'Are you sure?' } %></td>
  </tr>
<% end %>
</table>




<br />


<p>&lt;%= link_to 'New Post', new_post_path %>
```</p>

<p>上記の View は <code>@posts</code> 配列の内容やリンクを表示するためのコンテンツを <code>each</code> メソッドにより反復処理します。View で覚えておくべきいくつかのことは、以下の通りです。</p>

<ul>
<li><code>link_to</code> は特定の宛先へのハイパーリンクを生成する</li>
<li><code>edit_post_path</code> と <code>new_post_path</code> は、Rails が RESTful なルーティングの一部を提供するためのヘルパーです。Controller が含んでいる異なるアクションのための、様々なヘルパーを発見する事ができるでしょう。</li>
</ul>


<p>以前のバージョンの Rails では、ページが挿入されようとする前に、どのような HTML もエスケープされるように <code>&lt;%=h post.name %&gt;</code> を使用する必要がありました。Rails 3 より後のバージョンでは、これはデフォルトの動作になりました。エスケープしていない HTML を得るためには <code>&lt;%= raw post.name %&gt;</code>を使用します。</p>

<p>レンダリングプロセスのより詳細については <a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Layouts and Rendering in Rails</a> を参照してください。</p>

<h3 id="6.8+レイアウトをカスタマイズする">6.8 レイアウトをカスタマイズする</h3>

<p>View はHTMLがどのようにブラウザ上に表示されるのかという話の一部分でしかありません。Rails はまた Layouts という概念を持っており、Layouts は View のコンテナです。Rails がブラウザへ View をレンダリングする時に、Layout の HTML の内側に View の HTML をおきます。以前のバージョンの Rails では、<code>rails generate scaffold</code> コマンドが自動的にコントローラー固有のレイアウトを作成していました。例えば、Posts Contolloer のための app/views/layouts/posts.html.erb のように。しかしながら、この仕様は Rails 3 では変更されました。アプリケーション固有のレイアウトはすべての Contoller で使用され、app/views/layouts/application.html.erb 内で見つける事ができます。エディタでこのレイアウトを開いて、以下のように <code>body</code> タグを変更してみましょう。</p>

<p>```erb app/views/layouts/application.html.erb
&lt;!DOCTYPE html>
<html>
<head>
  <title>Blog</title>
  &lt;%= stylesheet_link_tag    "application" %>
  &lt;%= javascript_include_tag "application" %>
  &lt;%= csrf_meta_tags %>
</head>
<body style="background: #CCCCCC;"></p>

<p>&lt;%= yield %></p>

<p></body>
</html>
```</p>

<p>さて、<code>/post</code> ページを更新する時に、背景がグレーのページになっていることに気づくでしょう。この同じグレーの背景は、Posts に関連するすべての View で使用されることになります。原文ではグレーの色合いが白に近く、変化がわかりづらいので、このサンプルではもう少し暗めのグレーにしてあります。</p>

<p><img src="/images/rails_guides/listing-posts-gray.jpg" title="'Listing Posts'" ></p>

<p><img src="/images/rails_guides/new-post-gray.jpg" title="'New Posts'" ></p>

<p>背景がグレーになっている事がお分かりいただけるでしょうか？</p>

<p>今回の内容をまとめると、以下のようになります。</p>

<ul>
<li>index アクションで HTML と JSON 形式のレンダリングに対応していることを確認した</li>
<li>index.erb で each メソッドで Post 全件をイテレートして表示していた</li>
<li><code>link_to</code> は特定の宛先へのハイパーリンクを表す</li>
<li><code>app/views/layouts/application.html.erb</code> の背景を変更することによって、すべての Controller に変更が波及している</li>
</ul>


<p><a href="/blog/2013/05/06/rorguide06-creating-new-posts/">次回</a> へ続きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RailsGuides] #04 Model、バリデーションとコンソール]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/05/rorguide04-model/"/>
    <updated>2013-05-05T14:11:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/05/rorguide04-model</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/02/rorguide03-getting-up-and-running-quickly-with-scaffolding/">前回</a> は Scaffold を利用して Post の雛形を作成しました。今回は Model の中身を見て、バリデーションの基本を学び、コンソールで Model の動作を確認する方法について見ていきたいと思います。</p>

<!-- more -->


<p>
   <ul>

   <ul>

   <ul>
   <li><a href="#6.4+Model">6.4 Model</a>   </li>
   <li><a href="#6.5+バリデーションを追加する">6.5 バリデーションを追加する</a>   </li>
   <li><a href="#6.6+コンソールを使用する">6.6 コンソールを使用する</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<h3 id="6.4+Model">6.4 Model</h3>

<p>Post の Model を見てみましょう。app/models/post.rb は実にシンプルな内容です。</p>

<p><code>ruby app/models/post.rb
class Post &lt; ActiveRecord::Base
  attr_accessible :content, :name, :title
end
</code></p>

<p>本文を読み進める前に、コードを見て気になった事があります。<code>ActiveRecord::Base</code> は置いておくとして、属性のアクセスを定義するクラスメソッドは <code>attr_accessor</code> ではなくて、<code>attr_accessible</code> となっていますね。<a href="http://yoshifumisato.jeez.jp/wordpress/post/rails/882">Railsのattr_accessible設定について - チュパカブラの勉強日記</a> によると <code>attr_accessible</code> は Rails 独自の設定で、属性をセキュアに更新する仕組みのようです。</p>

<p><code>ActiveRecord::Base</code> を継承していることに注目してください。ActiveRecord は非常に多くの機能を、ユーザーが実装する Rails Model クラスに無料で提供しています。例えば、基本的なデータベースの CRUD(Create, Read, Update, Destroy)操作、データ妥当性チェック、同様に洗練された検索のサポートおよびお互いに複数のモデルを関連付けを可能にすることを含みます。このファイルで他に重要な部分は、<code>attr_accessible</code> です。これは(例えば、<code>update_attributes</code> 経由で)一括で更新する事が許可されている属性のホワイトリストを指定します。つまり、これは <code>attr_accessible</code> で指定した属性のみ Rails 上でアクセスできるということ意味しています。</p>

<h3 id="6.5+バリデーションを追加する">6.5 バリデーションを追加する</h3>

<p>Rails はモデルに送信されるデータの妥当性チェックを補助するメソッドを含みます。Post クラスにバリデーションを追加してみましょう。app/models/post.rb を開いて、以下のように編集します。</p>

<p>```ruby app/models/post.rb
class Post &lt; ActiveRecord::Base
  attr_accessible :content, :name, :title</p>

<p>  validates :name,  :presence => true
  validates :title, :presence => true,</p>

<pre><code>                :length =&gt; { :minimum =&gt; 5 }
</code></pre>

<p>end
```</p>

<p>これらの変更はすべての Post が name と title を値を含み(空ではない)、かつ title が少なくとも5文字以上の長さである事を保障するでしょう。Rails はモデル内の様々な状態－存在、カラムの一意性、書式および関連オブジェクトの存在－をチェックすることができます。バリデーションについては <a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html">Active Record Validations and Callbacks</a> で詳しい情報が記載されています。</p>

<h3 id="6.6+コンソールを使用する">6.6 コンソールを使用する</h3>

<p>実際にバリデーションの動作を見るために、コンソールを使用する事ができます。コンソールはコマンドラインツールでアプリケーションのコンテキストに沿った Ruby のコードを実行することができます。</p>

<p>デフォルトのコンソールはデータベースを変更してしまうので、代わりに <code>rails console --sandbox</code> コマンドを使用して、どのような変更を加えてもロールバックできるようにします。</p>

<p>コンソールが読み込まれた後に、Model で作業し使用する事ができます。 実際にコンソールを起動してみます。コンソールは入力と出力結果がわかりやすいように改行を加えてあります。</p>

<p>```bash
$ rails console --sandbox
Loading development environment in sandbox (Rails 3.2.12)
Any modifications you make will be rolled back on exit</p>

<p>1.9.3-p392 :001 > p = Post.new(content: "A new post")
 => #<Post id: nil, name: nil, title: nil, content: "A new post", created_at: nil, updated_at: nil></p>

<p>1.9.3-p392 :002 > p.save
   (0.1ms)  SAVEPOINT active_record_1
   (0.1ms)  ROLLBACK TO SAVEPOINT active_record_1
 => false</p>

<p>1.9.3-p392 :003 > p.errors.full_messages
 => ["Name can't be blank", "Title can't be blank", "Title is too short (minimum is 5 characters)"]</p>

<p>1.9.3-p392 :004 > exit
   (0.2ms)  rollback transaction
```</p>

<p>上記の実行結果が示すのは、新しい Post のインスタンスを作成し、それを保存しようと試みて、その戻り値として false が返り(保存が失敗したことを示しています)、そして、Post の errors の中身を検査しているということです。</p>

<p>一通り操作が終われば、<code>exit</code> と入力してコンソールを終了します。</p>

<p>development Web サーバーとは違い、コンソールはそれぞれの行毎に自動的にコードを新たに読み込みません。コンソールを開いている間に、(エディタで) Model を変更させたい場合には、<code>reload!</code> とコンソールのプロンプト上で入力すると、Model の変更が読み込まれます。</p>

<p>今回のまとめは、以下の通りです。</p>

<ul>
<li>Model の中身を見て、<code>ActiveRecord::Base</code> を継承していることを確認した</li>
<li>Model の属性にアクセスするために <code>attr_accessible</code> を定義していることを確認した</li>
<li>Model にバリデーションを追加した</li>
<li><code>rails console --sandbox</code> でコンソールを実行し、<code>exit</code> でロールバックを行い終了した</li>
</ul>


<p>切りがいいので、<a href="/blog/2013/05/06/rorguide05-listing-all-posts/">次回</a> に続きます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RailsGuides] #03 Scaffold で素早く立ち上げる]]></title>
    <link href="http://toshibohjp.github.io/blog/2013/05/02/rorguide03-getting-up-and-running-quickly-with-scaffolding/"/>
    <updated>2013-05-02T19:59:00+09:00</updated>
    <id>http://toshibohjp.github.io/blog/2013/05/02/rorguide03-getting-up-and-running-quickly-with-scaffolding</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/05/02/rorguide02-say-hello/">前回</a> では、"Hello, Rails" を表示するために、Controller と View を作成し、アプリケーションのルートにルーティングするようにしました。今回は Scaffold でアプリケーションの雛形を作成してみます。</p>

<!-- more -->


<p>
  <ul>

  <ul>
  <li><a href="#5+Scaffolding+で立ち上げ素早く実行する">5 Scaffolding で立ち上げ素早く実行する</a>  </li>
  <li><a href="#6+Resource+を作成する">6 Resource を作成する</a>
   <ul>
   <li><a href="#6.1+マイグレーションを実行する">6.1 マイグレーションを実行する</a>   </li>
   <li><a href="#6.2+リンクを追加する">6.2 リンクを追加する</a>   </li>
   <li><a href="#6.3+ブラウザでの+Posts+の動作">6.3 ブラウザでの Posts の動作</a>   </li>
   </ul>
  </li>
  </ul>
 </li>
 </ul>

</p>

<h2 id="5+Scaffolding+で立ち上げ素早く実行する">5 Scaffolding で立ち上げ素早く実行する</h2>

<p>Rails の Scaffolding アプリケーションの主要な部分を生成する手っ取り早い方法です。単一の操作だけの新しい Resource のための Model、View、Controller を作成したいと考えている場合は、Scaffolding は役に立つツールになります。</p>

<p>ちなみに Scaffolding は「足場を組む」という意味だそうです。</p>

<h2 id="6+Resource+を作成する">6 Resource を作成する</h2>

<p>blog アプリケーションのケースでは、Post リソースのための Scaffold を生成するところから始める事ができます。（これは単一の blog への投稿を表現しています。）</p>

<p>これを行うために、次のコマンドをターミナルで実行します。
```bash Postのリソースを作成する
$ rails generate scaffold Post name:string title:string content:text</p>

<pre><code>  invoke  active_record
  create    db/migrate/20130505013444_create_posts.rb
  create    app/models/post.rb
  invoke    test_unit
  create      test/unit/post_test.rb
  create      test/fixtures/posts.yml
  invoke  resource_route
   route    resources :posts
  invoke  scaffold_controller
  create    app/controllers/posts_controller.rb
  invoke    erb
  create      app/views/posts
  create      app/views/posts/index.html.erb
  create      app/views/posts/edit.html.erb
  create      app/views/posts/show.html.erb
  create      app/views/posts/new.html.erb
  create      app/views/posts/_form.html.erb
  invoke    test_unit
  create      test/functional/posts_controller_test.rb
  invoke    helper
  create      app/helpers/posts_helper.rb
  invoke      test_unit
  create        test/unit/helpers/posts_helper_test.rb
  invoke  assets
  invoke    coffee
  create      app/assets/javascripts/posts.js.coffee
  invoke    scss
  create      app/assets/stylesheets/posts.css.scss
  invoke  scss
  create    app/assets/stylesheets/scaffolds.css.scss
</code></pre>

<p>```</p>

<p>Scaffold ジェネレータはいくつかのフォルダに沿って、アプリケーションの中に数個(上の実行結果では 16)のファイルを生成し、<code>config/routs.rb</code> を編集します。</p>

<p>以下は Scaffold で何が生成されるかを早見表にまとめたものです。実行結果を見ると Rails ではオブジェクトをひとまとめにしたものを複数形として扱っている事に気づくでしょう。今回の場合では、Post が Post<strong>s</strong> になっています。</p>

<table>
  <tr><th>ファイル名</th><th>目的</th></tr>
  <tr><td>db/migrate/20130505013444_create_posts.rb</td><td>データベースに Post を作成するためのマイグレーション(実行した環境でタイムスタンプが異なります)
  </td></tr>
  <tr><td>app/models/post.rb</td><td>Post の Model</td></tr>
  <tr><td>test/unit/post_test.rb</td><td>Post の Model のための単体テストハーネス</td></tr>
  <tr><td>test/fixtures/posts.yml</td><td>テストで使用するサンプルの Post</td></tr>
  <tr><td>config/routs.rb</td><td>Post へのルーティング情報を含むように編集された</td></tr>
  <tr><td>app/controllers/posts_controller.rb</td><td>Posts Controller</td></tr>
  <tr><td>app/views/posts/index.html.erb</td><td>すべての Post の一覧を表示するための View</td></tr>
  <tr><td>app/views/posts/edit.html.erb</td><td>すでにある Post を編集するための View</td></tr>
  <tr><td>app/views/posts/show.html.erb</td><td>ひとつの Post を表示するための View</td></tr>
  <tr><td>app/views/posts/new.html.erb</td><td>Post を新規作成するための View</td></tr>
  <tr><td>app/views/posts/_form.html.erb</td><td>編集と新規作成で使用されるフォームのルック＆フィール全体を制御するための部品</td></tr>
  <tr><td>test/functional/posts_controller_test.rb</td><td>Post Controller のための機能テストハーネス</td><tr>
  <tr><td>app/helpers/posts_helper.rb</td><td>Post View で使用されるヘルパー機能を集めたもの</td></tr>
  <tr><td>test/unit/helpers/posts_helper_test.rb</td><td>posts_helper のための単体テストハーネス</td></tr>
  <tr><td>app/assets/javascripts/posts.js.coffee</td><td>Post Controller のための CoffeScript</td></tr>
  <tr><td>app/assets/stylesheets/posts.css.scss</td><td>Post Controller で使用する CSS</td></tr>
  <tr><td>app/assets/stylesheets/scaffolds.css.scss</td><td>Scaffold の View の見た目を浴するための CSS</td></tr>
</table>


<p>Scaffold はアプリケーションを素早く立ち上げ、実行することができますが、生成されたコードはご自分のアプリケーションには完全にはそぐわないでしょう。ほとんどは、生成されたコードをカスタマイズすることになります。</p>

<p>多くの経験をつんだ Rails 開発者は完全に Scaffold を避けて、全部もしくは大部分のコードをスクラッチから書き上げます。しかしながら、Rails は生成された Model、Controller、View やその他のソースのテンプレートをシンプルにカスタマイズさせてくれます。</p>

<p>より詳しい情報に関しては、<a href="http://guides.rubyonrails.org/generators.html">Creating and Customizing Rails Generators &amp; Templates</a> を参照すると良いでしょう。</p>

<h3 id="6.1+マイグレーションを実行する">6.1 マイグレーションを実行する</h3>

<p><code>rails generate scaffold</code> コマンドで生成されたもののひとつに、<em>データベース・マイグレーション</em> が含まれます。マイグレーションは Ruby のクラスで、データベーステーブルを作成したり変更するのをシンプルにするために設計されたものです。Rails はマイグレーションを実行するのに <code>rake</code> コマンドを使用し、データベースにマイグレーションを実行した後にも取り消せるようになっています。マイグレーションのファイル名はタイムスタンプが含まれ、生成された順番に実行することを保証します。</p>

<p>先程生成された db/migrate/20130505013444_create_posts.rb を見てみましょう。
```ruby db/migrate/20130505013444_create_posts.rb
class CreatePosts &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :posts do |t|
  t.string :name
  t.string :title
  t.text :content

  t.timestamps
end
</code></pre>

<p>  end
end
```</p>

<p>上記のマイグレーションは、change と名づけられたこのマイグレーションを実行する時に呼ばれるメソッドを定義しています。change メソッドは元に戻せる動作も定義しています。つまり、Rails は－後になって変更を元に戻したい場合に－このマイグレーションによってなされた変更を、逆の順番で実行する方法を把握していることを意味しています。</p>

<p>Rails のマイグレーションについてのより詳しい情報は <a href="http://guides.rubyonrails.org/migrations.html">Migrations</a> を参照してください。</p>

<p>現時点で、マイグレーションを実行するための <code>rake</code> コマンドを使用する事ができます。コマンドを実行してみましょう。
<code>bash マイグレーションの実行
$ rake db:migrate
==  CreatePosts: migrating ====================================================
-- create_table(:posts)
   -&gt; 0.0020s
==  CreatePosts: migrated (0.0021s) ===========================================
</code></p>

<p>Posts テーブルが作成されました。</p>

<p>デフォルトでは、<code>development</code> 環境で作業しているので、先程のコマンドは <code>config/database.yml</code> の development section で定義されているデータベースに適用されます。他の環境でマイグレーションを実行したい場合には、例えば <code>production</code> 環境では <code>rake db:migrate RAILS_ENV=production</code> と明示的に環境を指定する必要があります。</p>

<h3 id="6.2+リンクを追加する">6.2 リンクを追加する</h3>

<p>既に作成したホームページに Posts を連携するために、ホームページにリンクを追加してみましょう。app/views/home/index.html.erb を開き、以下のように修正します。
```erb app/views/home/index.html.erb</p>

<h1>Hello, Rails!</h1>


<p>&lt;%= link_to "My Blog", posts_path %>
```</p>

<p>蛇足ですが、前のサンプルでは Rails の後ろに "!" がついていなかったように記憶しているのですが、気のせいでしょうか。</p>

<p>link_to メソッドは Rails の組み込み View ヘルパーの一つです、表示するためのテキストと行き先に基づいてハイパーリンクを生成－この場合は Posts へのパス－sします。</p>

<h3 id="6.3+ブラウザでの+Posts+の動作">6.3 ブラウザでの Posts の動作</h3>

<p>さて、Postsの動作確認ができる準備が整いました。ブラウザでアクセスして、"My Blog" へのリンクをクリックしてみましょう。WEBrick を起動してない場合は <code>rails server</code> で WEBrick を起動します。</p>

<p><img src="/images/rails_guides/hello-rails-with-my-blog-link.jpg" title="Hello, Rails" alt="Hello, Rails"></p>

<p><img src="/images/rails_guides/listing-posts.jpg" title="Listing posts" alt="Listing posts"></p>

<p>これまでの一連の流れをまとめると、</p>

<ul>
<li><code>rails generate scaffold Post name:string title:string content:text</code> を実行して、Scaffolding で雛形を作成した</li>
<li><code>rake db:migrate</code> で Posts テーブルを作成した</li>
<li>app/view/home/index.html.erb を編集して、Posts へのリンクを作成した</li>
<li>ブラウザを起動して動作確認を行った</li>
</ul>


<p>ということになります。</p>

<p>切りがいいので <a href="/blog/2013/05/05/rorguide04-model/">次回</a> に続きます。</p>
]]></content>
  </entry>
  
</feed>
